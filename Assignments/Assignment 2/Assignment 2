#include <iostream>
#include <vector>

using namespace std;

class TicTacToe {
private:
    vector<vector<char>> board;
    char currentPlayer;
    
public:
    TicTacToe() {
        board = {{'1', '2', '3'},
                 {'4', '5', '6'},
                 {'7', '8', '9'}};
        currentPlayer = 'X';
    }

    void printBoard() {
        cout << "\n";
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                cout << " " << board[i][j] << " ";
                if (j < 2) cout << "|";
            }
            cout << "\n";
            if (i < 2) cout << "---|---|---\n";
        }
        cout << "\n";
    }

    bool isWinner() {
        // Check rows, columns and diagonals
        for (int i = 0; i < 3; ++i) {
            // Check rows
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2])
                return true;
            // Check columns
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i])
                return true;
        }

        // Check diagonals
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2])
            return true;
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0])
            return true;

        return false;
    }

    bool isDraw() {
        // If all cells are filled and no winner, it's a draw
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                if (board[i][j] != 'X' && board[i][j] != 'O')
                    return false;  // There are still moves left
        return true; // No moves left
    }

    bool makeMove(int move) {
        int row = (move - 1) / 3;
        int col = (move - 1) % 3;

        // If the cell is already taken, return false
        if (board[row][col] == 'X' || board[row][col] == 'O')
            return false;

        // Place the current player's mark
        board[row][col] = currentPlayer;
        return true;
    }

    void switchPlayer() {
        // Switch between 'X' and 'O'
        if (currentPlayer == 'X')
            currentPlayer = 'O';
        else
            currentPlayer = 'X';
    }

    char getCurrentPlayer() {
        return currentPlayer;
    }
};

int main() {
    TicTacToe game;
    int move;
    bool validMove;
    
    while (true) {
        game.printBoard();
        cout << "Player " << game.getCurrentPlayer() << "'s turn. Enter a move (1-9): ";
        cin >> move;

        // Validate the move
        validMove = game.makeMove(move);
        if (!validMove) {
            cout << "Invalid move. Try again.\n";
            continue;
        }

        // Check for winner
        if (game.isWinner()) {
            game.printBoard();
            cout << "Player " << game.getCurrentPlayer() << " wins!\n";
            break;
        }

        // Check for draw
        if (game.isDraw()) {
            game.printBoard();
            cout << "It's a draw!\n";
            break;
        }

        // Switch players
        game.switchPlayer();
    }

    return 0;
}


#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        // Use 2D arrays of sets to track digits for rows, columns, and sub-boxes
        unordered_set<char> rows[9];
        unordered_set<char> cols[9];
        unordered_set<char> boxes[9];
        
        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                char num = board[i][j];
                
                if (num == '.') {
                    continue; // Ignore empty cells
                }
                
                // Calculate the index for the sub-box (3x3 grid)
                int boxIndex = (i / 3) * 3 + (j / 3);
                
                // Check if the digit has already appeared in the row, column, or sub-box
                if (rows[i].count(num) || cols[j].count(num) || boxes[boxIndex].count(num)) {
                    return false; // Invalid board
                }
                
                // Add the digit to the respective sets
                rows[i].insert(num);
                cols[j].insert(num);
                boxes[boxIndex].insert(num);
            }
        }
        
        return true; // Valid board
    }
};

// Helper function to print the board
void printBoard(const vector<vector<char>>& board) {
    for (const auto& row : board) {
        for (char cell : row) {
            cout << cell << " ";
        }
        cout << endl;
    }
}

int main() {
    Solution solution;

    // Example Sudoku board
    vector<vector<char>> board = {
        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '8', '.', '.', '.', '3', '2'},
        {'4', '.', '7', '9', '.', '6', '.', '9', '.'},
        {'7', '.', '.', '.', '.', '.', '4', '.', '8'},
        {'9', '.', '6', '1', '8', '.', '.', '.', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
    };

    // Print the board
    printBoard(board);

    // Check if the board is valid
    if (solution.isValidSudoku(board)) {
        cout << "The board is valid!" << endl;
    } else {
        cout << "The board is not valid!" << endl;
    }

    return 0;
}
